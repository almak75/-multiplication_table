
#from base64 import b16decode
#from re import X
import streamlit as st
import random

import time
import pandas as pd


#st.set_page_config(page_title='–¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è', page_icon='üññ')
st.set_page_config(page_title='–¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è')
st.title('–¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è')

##MainMenu {visibility: hidden;}
#footer {visibility: hidden;}
m = st.markdown("""
<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
div.stButton > button:first-child {
    background-color: #0099ff;
    color:#ffffff;
    height: 48px;
    font-size: 32px;
}
div.stButton > button:hover {
    background-color: #00ff00;
    color:#ff0000;
    height: 48px;
    font-size: 32px;
    }

</style>""", unsafe_allow_html=True)





def miltiplication(a,b):
    return f'{a} x {b}', a*b
def division(a,b):
    return f'{a*b} : {b}', a

def mistake_test():
   
    if not 'big_stat' in st.session_state:
        return
    df = st.session_state.big_stat
    mist = df['–û—à–∏–±–∫–∏'].to_list()
    mist = [tmp for tmp in mist if tmp]
    mist = ','.join(mist)
        
    mist = mist.split(',')
    ##–±–µ–∂–∏–º –ø–æ –æ—à–∏–±–∫–∞–º
    #print('mist', mist)
    new_zd = []
    for m in mist:
        if not m:
            continue
        if 'x' in m:
            func = miltiplication
        elif ':' in m:
            func = division
        m = m.replace('x','')
        m = m.replace(':','')
        m = m.replace('=','')
        
        m = m.strip()
        dig = m.split()
        #print('m',m)
        #print('dig', dig)
        if func == miltiplication:
            a = int(dig[0]) #–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
            b = int(dig[1]) #–±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
        else: #–î–ï–õ–ï–ù–ò–ï! –±–µ–µ—Ä–µ–º 2 –∏ —Ç—Ä–µ—Ç—å–µ
            a = int(dig[1]) #–±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
            b = int(dig[0])//a #–±–µ—Ä–µ–º –¥–µ–ª–µ–Ω–∏–µ!!!!

        if mutirovat: #–ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º —á–∏—Å–ª–∞ –º–µ—Å—Ç–∞–º–∏
            a,b = b,a 

        new_zd.append((a,b,func))
    if len(new_zd)==0:
        
        return
    random.shuffle(new_zd)  #–≤—Å—ë –ø–µ—Ä–µ–º–µ—à–∞–µ–º, —á—Ç–æ–± 
    #print(new_zd)
    new_zd = list(set(new_zd))  #—ç—Ç–æ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –≤—Å–µ –¥—É–±–ª–∏. –ú–æ–≥–ª–∏ –æ—à–∏–±–∞—Ç—å—Å—è –Ω–∞ –æ–¥–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º–Ω–æ–≥–æ —Ä–∞–∑, –Ω–æ –ø–∏—Ö–∞—Ç—å –µ–≥–æ –º–Ω–æ–≥–æ —Ä–∞–∑ –Ω–µ–Ω–∞–¥–æ –≤ —Ç–µ—Å—Ç
    st.session_state.zadacha = new_zd

    st.session_state.mist = new_zd
    #return

    s = time.ctime()
    start_time = s.split(' ')[3]
    start_time_cek =int(time.time())
    numbers=['—Ç–µ—Å—Ç –ø–æ –æ—à–∏–±–∫–∞–º']
    stat={'good':0, 'wrong':0, 'voprosov':len(new_zd), 'start_time':start_time,'start_time_cek':start_time_cek, 'mistakes':[], 'numbers':numbers, '–¥–µ–ª–µ–Ω–∏–µ':'', '—É–º–Ω–æ–∂–µ–Ω–∏–µ':'', 'wrong_answer':[]}
    st.session_state.stat = stat

    st.session_state.answer='' #—Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç
    st.session_state.q = '' #—Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å –∏ –ü–†–ê–í–ò–õ–¨–ù–´–ô –æ—Ç–≤–µ—Ç —Ç–µ—Å—Ç–∞
    st.session_state.last=0
    


def start_test(*current_parameters):

    st.session_state.answer='' #—Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç
    st.session_state.q = '' #—Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å –∏ –ü–†–ê–í–ò–õ–¨–ù–´–ô –æ—Ç–≤–µ—Ç —Ç–µ—Å—Ç–∞
    st.session_state.last=0
    #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    st.session_state.param = current_parameters
        
        
    #–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—É—Ç —Å—Ä–∞–∑—É –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤
    l = [x1,x2,x3,x4,x5,x6,x7,x8,x9,x10]
    numbers = [i+1 for i in range(len(l)) if l[i]]
    n = []
   

    start =[1,2][del1]
    finish=[11,10][del10]
    long = finish - start + 1
    for i in numbers:
        n.extend(list(zip(range(start,finish), [i]*long)))
    n=[(min(i), max(i)) for i in n]
    n = list(set(n))

    zd = n * (N//len(n))
    zd.extend(random.sample(n, N % len(n)))

    #–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    oper = []
    if mult:
        oper.append(miltiplication)
    if div:
        oper.append(division)
    oper = oper * N
    oper = oper[:N]

    #—Å–æ–µ–¥–∏–Ω—è–µ–º —Ü–∏—Ñ—Ä—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    new_zd = []
    for i in range(N):
        tmp= list(zd[i])
        random.shuffle(tmp)
        tmp.append(oper[i])
        new_zd.append(tmp)

    random.shuffle(new_zd)
    st.session_state.zadacha = new_zd




    #–ì–û–¢–û–í–ò–ú –î–ê–ù–ù–´–ï –í –°–¢–ê–¢–ò–°–¢–ò–ö–£
    s = time.ctime()
    start_time = s.split(' ')[3]
    start_time_cek =int(time.time())
    numbers=['x'+str(n) for n in numbers]
    stat={'good':0, 'wrong':0, 'voprosov':N, 'start_time':start_time,'start_time_cek':start_time_cek, 'mistakes':[], 'numbers':numbers, '–¥–µ–ª–µ–Ω–∏–µ':div, '—É–º–Ω–æ–∂–µ–Ω–∏–µ':mult, 'wrong_answer':[]}
    st.session_state.stat = stat

    #—Å—é–¥–∞ –±—É–¥–µ–º —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã. –í–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ –∏—Ö –ø—Ä–∏–¥–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ –Ω–∞ —à—Ç—Ä–∞—Ñ–Ω–æ–π –∫—Ä—É–≥
    st.session_state.crug=[]
    st.session_state.shot =''



with st.expander("–ù–ê–°–¢–†–û–ô–ö–ò"):
    st.text('–í–∞–∂–Ω–æ: –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∞, —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω –∏ –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–æ–≤—ã–π')

    st.write(':blue[–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ–º —É–º–Ω–æ–∂–∞—Ç—å:]')

    col1, col2, col3, col4,col5 = st.columns(5)
    with col1:
        x1 = st.checkbox('x1', value=False)
        x6 = st.checkbox('x6', value=True)
    with col2:
        x2 = st.checkbox('x2', value=True)
        x7 = st.checkbox('x7', value=True)
    with col3:
        x3 = st.checkbox('x3', value=True)
        x8 = st.checkbox('x8', value=True)
    with col4:
        x4 = st.checkbox('x4', value=True)
        x9 = st.checkbox('x9', value=True)
    with col5:
         x5 = st.checkbox('x5', value=True)
         x10 = st.checkbox('x10', value=False)
    
         
    st.write(':blue[–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:]')
    op1, op2 = st.columns(2)
    with op1:
         mult = st.checkbox('–£–º–Ω–æ–∂–µ–Ω–∏–µ', value=True)
    with op2:
         div = st.checkbox('–î–µ–ª–µ–Ω–∏–µ', value=False)
    if not mult and not div:
        st.write(':red[–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é —É–º–Ω–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–µ–ª–µ–Ω–∏–µ]')
    
    N =st.slider(':blue[–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤:]', 5, 100,10)
    
    inp = st.selectbox(':blue[–í–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞]', ('–≤—ã–±–æ—Ä –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö','–≤–≤–æ–¥ —á–∏—Å–ª–∞'))
    
    st.write(':blue[–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:]')
    del1 = st.checkbox('–∏—Å–∫–ª—é—á–∏—Ç—å —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 1 –∏–∑ —Ö2....x10', value=True)
    del10 = st.checkbox('–∏—Å–∫–ª—é—á–∏—Ç—å —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 10 –∏–∑ —Ö1....x9', value=True)
    shtraf = st.checkbox('–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–æ—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤ –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç–∞', value=False, disabled=False, help = '–í–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞ –∏ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç')
    right_answer = st.checkbox('–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞', value=True)




current_parameters = (x1,x2,x3,x4,x5,x6,x7,x8,x9,x10, mult, div, N, inp)
but = 0
if 'param' not in st.session_state or st.session_state.param !=current_parameters:
    but = 1



if but:
    #st.write('–¢–µ–∫—É—â–∏–µ',current_parameters)
    #if 'param' in st.session_state:
    #    st.write('–ü—Ä–æ—à–ª—ã–µ', current_parameters.param)
    
    start = st.button('–ù–æ–≤—ã–π —Ç–µ—Å—Ç', on_click=start_test, args=current_parameters, type='secondary')
    #if start:
    #    st.session_state.param = current_parameters
        
    #    st.experimental_rerun()
#—É –Ω–∞—Å —É–∂–µ –∏–¥–µ—Ç —Ç–µ—Å—Ç
#–ø–æ–∫–∞ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –º—ã –∏—Ö –∑–∞–¥–∞–µ–º
else:
    placeholder_big = st.empty()
    with placeholder_big.container():
        zd = st.session_state.zadacha
        if (len(zd)>0) or (shtraf and len(st.session_state.crug)>0):
            #st.title(zd)
            if len(zd)>0:
                vopros = list(st.session_state.zadacha[0])
                st.session_state.zadacha = st.session_state.zadacha[1:]
            else: #–Ω–∞—á–∏–Ω–∞–µ–º –±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —à—Ç—Ä–∞—Ñ–Ω–æ–≥–æ –∫—Ä—É—à–∞
                vopros = list(st.session_state.crug[0])
                vopros=[vopros[1], vopros[0], vopros[2]]  #–º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ü–∏—Ñ—Ä—ã, —á—Ç–æ–±—ã –∂–∏–∑–Ω—å –ª–µ–≥–∫–æ–π –Ω–µ –∫–∞–∑–∞–ª–∞—Å—å
                st.session_state.crug = st.session_state.crug[1:] #—É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤–∑—è—Ç—ã–π –ø—Ä–∏–º–µ—Ä
                st.session_state.stat["voprosov"] +=1
            
            st.session_state.current_example = vopros #–≤–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ –ø—Ä–∏–º–µ—Ä –ø—Ä–∏–¥–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å –≤ –æ—á–µ—Ä–µ–¥–±
       
        
           
            func = vopros[2] #–ø–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            a,b = vopros[0],vopros[1] #–ø–æ–ª—É—á–∞–µ–º 2 —á–∏—Å–ª–∞
            q,otv = func(a,b)  # q = —ç—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–º–µ—Ä–∞, otv - —ç—Ç–æ –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∏–º–µ—Ä–µ
        
            def click_b(*answer):
                st.session_state.shot = st.session_state.current_example
                st.session_state.answer=answer
                st.session_state.q = answer[:2]
                if inp!='–≤–≤–æ–¥ —á–∏—Å–ª–∞':
                    st.session_state.last=1


        
            answer=-1
            if inp=='–≤–≤–æ–¥ —á–∏—Å–ª–∞': 
                with st.form(key='qwe', clear_on_submit=True):
                    st.title(q)
                    answer = st.number_input('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç',step=1, format='%i') #%d %e %f %g %i %u

                    s_b = st.form_submit_button("–ì–æ—Ç–æ–≤–æ", on_click=click_b, args=(q,otv, answer))
                
                    if s_b:
                        #click_b(st.session_state.q,answer)
                        tmp=list(st.session_state.q)
                        tmp.append(answer)
                        st.session_state.answer=tuple(tmp)
                        #st.write('–æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç1', answer)
                        #st.session_state.answer=answer

            else: #–∫–Ω–æ–ø–∫–∏
                 candidat = [otv-1,otv-2, otv-3,otv+1,otv+2, otv+3]
                 candidat = random.sample(candidat, 3)
                 candidat.append(otv)
                 random.shuffle(candidat)
                 st.session_state.last=0
                
                 with st.form(key='qwe2'):
                    st.title(q)
                    st.write('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º')
                    column1, column2, column3, column4 = st.columns(4)
                    with column1:  
                        otv0 = st.form_submit_button(use_container_width=True, label = str(candidat[0]), on_click=click_b, args=(q, otv, candidat[0]))
                    with column2:  
                        otv1 = st.form_submit_button(use_container_width=True, label = str(candidat[1]), on_click=click_b, args=(q, otv, candidat[1]))
                    with column3:  
                        otv2 = st.form_submit_button(use_container_width=True, label = str(candidat[2]), on_click=click_b, args=(q, otv, candidat[2]))
                    with column4:  
                        otv3 = st.form_submit_button(use_container_width=True, label = str(candidat[3]), on_click=click_b, args=(q, otv, candidat[3]))
        else:#–≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
           
            
            
            #st.title('–í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: '+str(st.session_state.stat['voprosov']))
            st.title(f':green[–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {st.session_state.stat["voprosov"] - st.session_state.stat["wrong"]}]')
            st.title(f':red[–û—à–∏–±–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {st.session_state.stat["wrong"]}]')
            t = end_time_cek =int(time.time()) - int(st.session_state.stat['start_time_cek'])
            #st.title('–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: '+str( f'{t//60} –º. {t%60} —Å–µ–∫.'))
            if st.session_state.stat['wrong'] !=0:
                st.title(':blue[–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã:]')
                tmp = set(st.session_state.stat['mistakes']) #—Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —à—Ç—Ä–∞—Ñ–Ω–æ–π –∫—Ä—É–≥, —Ç–æ –Ω–∞–¥–æ —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏
                for m in tmp:
                    st.title(f'   {m}')
            
            start = st.button('–ù–æ–≤—ã–π —Ç–µ—Å—Ç', on_click=start_test, args=current_parameters)
            tmp_dict=st.session_state.stat
            zad=' '.join(tmp_dict['numbers'])
            wrong_answer = ', '.join(tmp_dict['wrong_answer'])
            for_big_stat={'–ù–∞—á–∞–ª–æ':tmp_dict['start_time'], '–î–ª–∏—Ç.':f'{t//60} –º. {t%60} —Å–µ–∫.', '–ó–∞–¥–∞–Ω–∏–µ': zad, '–í–æ–ø—Ä–æ—Å–æ–≤':tmp_dict['voprosov'], '–û—à–∏–±–æ–∫':tmp_dict['wrong'], '–û—à–∏–±–∫–∏':wrong_answer}
            df_for_big_stat = pd.DataFrame(for_big_stat, index=[0])
            #st.dataframe(df_for_big_stat)
            #st.write(for_big_stat)
            #st.write(tmp_dict['numbers'])
            if 'big_stat' in st.session_state:
                st.session_state.big_stat = pd.concat([st.session_state.big_stat[st.session_state.big_stat['–ù–∞—á–∞–ª–æ'] !=tmp_dict['start_time']], df_for_big_stat])
            else:
                st.session_state.big_stat = df_for_big_stat

           
            #—ç—Ç–æ –∂—É—Ç–∫–∏–π –∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
            #–≤—ã–≤–æ–¥–∏–º —Ñ–æ—Ä–º—É, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏ —Ç—É—Ç –∂–µ —Ñ–æ—Ä–º—É —Å—Ç–∏—Ä–∞–µ–º...–¥—Ä—É–≥–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å...
            #=========================================================================================================================
            #=========================================================================================================================
            #=========================================================================================================================
            if inp=='–≤–≤–æ–¥ —á–∏—Å–ª–∞': 
                placeholder = st.empty()
                with placeholder.container():
                    with st.form(key='qwe', clear_on_submit=True):
                        answer = st.number_input('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç',step=1, format='%i') #%d %e %f %g %i %u

                       
                        s_b = st.form_submit_button("–ì–æ—Ç–æ–≤–æ")
                
                        if s_b:
                            #click_b(st.session_state.q,answer)
                            tmp=list(st.session_state.q)
                            tmp.append(answer)
                            st.session_state.answer=tuple(tmp)
                            st.session_state.last=1
                placeholder.empty()
            #=========================================================================================================================
            #=========================================================================================================================
            #=========================================================================================================================
def next_example():
    
    #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–∏–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥—å. –ù–ï –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô, –ê –¢–ï–ö–£–©–ò–ô, –ö–û–¢–û–†–´–ô –£–ñ–ï –í–´–í–ï–î–ï–ù –ù–ê –≠–ö–†–ê–ù
    
    all_example = st.session_state.zadacha
    #if len(all_example)>0: #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ–¥–∏–Ω
    zd = st.session_state.current_example
    all_example.append(zd)
    st.session_state.zadacha = all_example

#–í–´–í–û–î–ò–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û–ë –û–®–ò–ë–û–ß–ù–û–ú –û–¢–í–ï–¢–ï....–£–î–ê–õ–Ø–Ø –¢–ï–ö–£–®–ò–ô –ü–†–ò–ú–ï–† –∏ –í–û–ó–í–†–ê–©–ê–Ø –ï–ì–û –í –û–ß–ï–†–ï–î–¨ 
if 'answer' in st.session_state:
    last_example = st.session_state.answer
    if type(last_example) is tuple:
        #st.write(last_example, len(last_example), type(last_example))
        if last_example[-1] != last_example[-2]: #–µ—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å—Ö–æ–¥—è—Ç—Å—è
            st.session_state.stat['wrong'] +=1 #—Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫—É
            st.session_state.stat['mistakes'].append(f'{last_example[0]} = {last_example[-2]}')
            st.session_state.stat['wrong_answer'].append(f'{last_example[0]} = {last_example[-1]}')

            
            st.session_state.crug.append(st.session_state.shot)


            if right_answer: #–Ω–∞–¥–æ —Å–æ–æ–±—â–∏—Ç—å –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
                placeholder_big.empty()
                if st.session_state.last !=1:
                    next_example()
                st.session_state.answer='' #—Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç
                st.session_state.q = '' #—Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å –∏ –ü–†–ê–í–ò–õ–¨–ù–´–ô –æ—Ç–≤–µ—Ç —Ç–µ—Å—Ç–∞  
                st.title(f':red[–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π]')
                st.title(f'–ó–∞–ø–æ–º–Ω–∏: {last_example[0]} = {last_example[-2]}')
                st.button('–î–∞–ª—å—à–µ')
        else: #–æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π, –Ω–∞–¥–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å
            st.session_state.stat['good'] +=1

            
          

with st.expander("–°–¢–ê–¢–ò–°–¢–ò–ö–ê"):
    if 'big_stat' in st.session_state:
           st.write('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:')
           df = st.session_state.big_stat
           if df.shape[0]>0:
               st.dataframe(st.session_state.big_stat)
               c1, c2 = st.columns(2)
               with c1:
                   hard_test = st.button('–ó–∞–ø—Éc—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø–æ –æ—à–∏–±–∫–∞–º', on_click =mistake_test, disabled=False)
               with c2:
                   mutirovat = st.checkbox('–º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã', help='–ø—Ä–∏–º–µ—Ä—ã –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n–≤–º–µ—Å—Ç–æ 3—Ö5 –±—É–¥–µ—Ç 5—Ö3, –≤–º–µ—Å—Ç–æ 24:3 –±—É–¥–µ—Ç 24:8')
    else:
           st.write('–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤')
with st.expander("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π"):
    st.write('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç –Ω–∞ –∫—Ä–∞—Å–æ—Ç—É, –∞–Ω–∏–º–∞—Ü–∏—é, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ.')
    st.write('–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –≤–∏–¥–µ–æ —Ä–æ–ª–∏–∫–µ.')
    st.write('–í–æ–ø—Ä–æ—Å—ã, –æ—Ç–∑—ã–≤—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤ telegram:  @makarov75')
    st.video('https://youtu.be/pt51aVIDpFA')
 
#if 'stat' in st.session_state:
#    st.write(st.session_state.stat)
##if 'mist' in st.session_state:
##    st.write(st.session_state.mist)
#if 'crug' in st.session_state:
#    st.write(st.session_state.crug)

#if 'shot' in st.session_state:
#    st.write(st.session_state.shot)